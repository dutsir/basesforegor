import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { Category } from '../models/category.model';
import { Product } from '../models/product.model';

@Injectable()
export class CategoriesService {
  private readonly logger = new Logger(CategoriesService.name);

  constructor(
    @InjectModel(Category)
    private categoryModel: typeof Category,
    @InjectModel(Product)
    private productModel: typeof Product,
  ) {}

  async findAll(): Promise<Category[]> {
    try {
      this.logger.log('–ò—â—É –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...');
      const categories = await this.categoryModel.findAll();
      this.logger.log(`–í–æ—Ç ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π! üéØ`);
      return categories;
    } catch (error) {
      this.logger.error(' —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
      throw error;
    }
  }

  async findOne(id: number): Promise<Category> {
    try {
      this.logger.log(`–ò—â—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å id: ${id}...`);
      const category = await this.categoryModel.findByPk(id);
      if (!category) {
        this.logger.warn(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üò¢`);
        throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      return category;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${id}:`, error);
      throw error;
    }
  }

  async create(categoryData: Partial<Category>): Promise<Category> {
    try {
      this.logger.log('–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é...');
      const category = await this.categoryModel.create(categoryData);
      this.logger.log(`–£—Ä–∞! –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å id: ${category.category_id} üéâ`);
      return category;
    } catch (error) {
      this.logger.error('—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      throw error;
    }
  }

  async update(id: number, categoryData: Partial<Category>): Promise<[number, Category[]]> {
    try {
      this.logger.log(`–û–±–Ω–æ–≤–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${id}...`);
      const result = await this.categoryModel.update(categoryData, {
        where: { category_id: id },
        returning: true,
      });
      this.logger.log(`–ì–æ—Ç–æ–≤–æ! –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ ‚ú®`);
      return result;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${id}:`, error);
      throw error;
    }
  }

  async remove(id: number): Promise<number> {
    try {
      this.logger.log(`–£–¥–∞–ª—è—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${id}...`);
      const result = await this.categoryModel.destroy({
        where: { category_id: id },
      });
      this.logger.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${id} —É–¥–∞–ª–µ–Ω–∞ üëã`);
      return result;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${id}:`, error);
      throw error;
    }
  }

  async getCategoryWithProducts(id: number): Promise<Category> {
    try {
      this.logger.log(`–ò—â—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é ${id} —Å —Ç–æ–≤–∞—Ä–∞–º–∏...`);
      const category = await this.categoryModel.findByPk(id, {
        include: [{
          model: Product,
          as: 'products'
        }]
      });
      if (!category) {
        this.logger.warn(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ üò¢`);
        throw new Error('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      this.logger.log(`–í–û–û–¢ ${category.products.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! üì¶`);
      return category;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${id} —Å —Ç–æ–≤–∞—Ä–∞–º–∏`, error);
      throw error;
    }
  }
} 