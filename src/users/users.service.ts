import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { User } from '../models/user.model';
import { Order } from '../models/order.model';
import { OrderDetail } from '../models/order-detail.model';
import { OrderStatus } from '../models/order-status.model';
import { Sequelize, Op } from 'sequelize';
import * as bcrypt from 'bcrypt';

@Injectable()
export class UsersService {
  private readonly logger = new Logger(UsersService.name);

  constructor(
    @InjectModel(User)
    private userModel: typeof User,
    @InjectModel(Order)
    private orderModel: typeof Order,
    @InjectModel(OrderDetail)
    private orderDetailModel: typeof OrderDetail,
    @InjectModel(OrderStatus)
    private orderStatusModel: typeof OrderStatus,
  ) {}

  async createTestUser(): Promise<User> {
    const hashedPassword = await bcrypt.hash('test123', 10);
    
    return this.userModel.create({
      email: 'test@example.com',
      password_hash: hashedPassword,
      first_name: 'Test',
      last_name: 'User',
      phone: '+1234567890',
    });
  }

  async findAll(): Promise<User[]> {
    try {
      this.logger.log('–ò—â—É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
      const users = await this.userModel.findAll();
      this.logger.log(`–í–û—Ç ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏! üíï`);
      return users;
    } catch (error) {
      this.logger.error('—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }

  async findOne(id: number): Promise<User> {
    try {
      this.logger.log(`–ò—â—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id: ${id}...`);
      const user = await this.userModel.findByPk(id);
      if (!user) {
        this.logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢`);
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return user;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, error);
      throw error;
    }
  }

  async create(userData: Partial<User>): Promise<User> {
    try {
      this.logger.log('–°–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
      const user = await this.userModel.create(userData);
      this.logger.log(`–£—Ä–∞! –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: ${user.user_id} üéâ`);
      return user;
    } catch (error) {
      this.logger.error('—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  }

  async update(id: number, userData: Partial<User>): Promise<[number, User[]]> {
    try {
      this.logger.log(`–û–±–Ω–æ–≤–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}...`);
      const result = await this.userModel.update(userData, {
        where: { user_id: id },
        returning: true,
      });
      this.logger.log(`–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} –æ–±–Ω–æ–≤–ª–µ–Ω ‚ú®`);
      return result;
    } catch (error) {
      this.logger.error(`–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, error);
      throw error;
    }
  }

  async remove(id: number): Promise<number> {
    try {
      this.logger.log(`–£–¥–∞–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}...`);
      const result = await this.userModel.destroy({
        where: { user_id: id },
      });
      this.logger.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${id} —É–¥–∞–ª–µ–Ω üëã`);
      return result;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${id}:`, error);
      throw error;
    }
  }

  async getTopSpendingUsers() {
    try {
      this.logger.log('–ò—â—É —Å–∞–º—ã—Ö —â–µ–¥—Ä—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π...');

      const yearAgo = new Date();
      yearAgo.setFullYear(yearAgo.getFullYear() - 1);

      const users = await this.userModel.findAll({
        include: [
          {
            model: Order,
            as: 'orders',
            include: [
              {
                model: OrderDetail,
                as: 'orderDetails'
              },
              {
                model: OrderStatus,
                as: 'status',
                where: {
                  name: 'Delivered'
                }
              }
            ],
            where: {
              order_date: {
                [Op.gte]: yearAgo
              }
            }
          }
        ]
      });

      const result = users.map(user => {
        const totalSpent = user.orders.reduce((sum, order) => 
          sum + order.orderDetails.reduce((orderSum, detail) => 
            orderSum + (detail.quantity * detail.price_per_unit), 0), 0);
        
        const totalOrders = user.orders.length;
        const avgOrderValue = totalOrders > 0 ? totalSpent / totalOrders : 0;

        return {
          user_id: user.user_id,
          full_name: `${user.first_name} ${user.last_name}`,
          email: user.email,
          total_orders: totalOrders,
          total_spent: totalSpent,
          avg_order_value: Math.round(avgOrderValue * 100) / 100
        };
      });

      result.sort((a, b) => b.total_spent - a.total_spent);
      return result.slice(0, 5);
    } catch (error) {
      this.logger.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–ø–æ–≤—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }
} 