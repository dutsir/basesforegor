import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { Wishlist } from '../models/wishlist.model';
import { Product } from '../models/product.model';
import { User } from '../models/user.model';

@Injectable()
export class WishlistService {
  private readonly logger = new Logger(WishlistService.name);

  constructor(
    @InjectModel(Wishlist)
    private wishlistModel: typeof Wishlist,
    @InjectModel(Product)
    private productModel: typeof Product,
    @InjectModel(User)
    private userModel: typeof User,
  ) {}

  async findAll(): Promise<Wishlist[]> {
    try {
      this.logger.log('–ò—â—É –≤—Å–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã...');
      const items = await this.wishlistModel.findAll();
      this.logger.log(`–≤–æ—Ç ${items.length} –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã! üíù`);
      return items;
    } catch (error) {
      this.logger.error(' —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:', error);
      throw error;
    }
  }

  async findOne(id: number): Promise<Wishlist> {
    try {
      this.logger.log(`–ò—â—É –∏–∑–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å id: ${id}...`);
      const item = await this.wishlistModel.findByPk(id);
      if (!item) {
        this.logger.warn(`–ò–∑–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢`);
        throw new Error('–ò–∑–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return item;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ${id}:`, error);
      throw error;
    }
  }

  async create(wishlistData: Partial<Wishlist>): Promise<Wishlist> {
    try {
      this.logger.log('–î–æ–±–∞–≤–ª—è—é —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...');
      const item = await this.wishlistModel.create(wishlistData);
      this.logger.log(`–£—Ä–∞! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å id: ${item.wishlist_id} üéâ`);
      return item;
    } catch (error) {
      this.logger.error('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:', error);
      throw error;
    }
  }

  async update(id: number, wishlistData: Partial<Wishlist>): Promise<[number, Wishlist[]]> {
    return this.wishlistModel.update(wishlistData, {
      where: { wishlist_id: id },
      returning: true,
    });
  }

  async remove(id: number): Promise<number> {
    try {
      this.logger.log(`–£–¥–∞–ª—è—é —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ${id}...`);
      const result = await this.wishlistModel.destroy({
        where: { wishlist_id: id },
      });
      this.logger.log(`–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üëã`);
      return result;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ ${id}:`, error);
      throw error;
    }
  }

  async getUserWishlist(userId: number): Promise<Wishlist[]> {
    try {
      this.logger.log(`–ò—â—É –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      const items = await this.wishlistModel.findAll({
        where: { user_id: userId },
        include: [{
          model: Product,
          as: 'product'
        }]
      });
      
      return items;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }

  async clearUserWishlist(userId: number): Promise<number> {
    try {
      this.logger.log(`–û—á–∏—â–∞—é –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      const result = await this.wishlistModel.destroy({
        where: { user_id: userId }
      });
      this.logger.log(`–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–æ! üßπ`);
      return result;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }

  async isInWishlist(userId: number, productId: number): Promise<boolean> {
    try {
      this.logger.log(`–ü—Ä–æ–≤–µ—Ä—è—é, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä ${productId} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      const item = await this.wishlistModel.findOne({
        where: {
          user_id: userId,
          product_id: productId
        }
      });
      const isInWishlist = !!item;
      this.logger.log(`–¢–æ–≤–∞—Ä ${isInWishlist ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º ${isInWishlist ? 'üíñ' : 'üíî'}`);
      return isInWishlist;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:`, error);
      throw error;
    }
  }
} 