import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { CartItem } from '../models/cart-item.model';
import { Product } from '../models/product.model';
import { User } from '../models/user.model';

@Injectable()
export class CartItemsService {
  private readonly logger = new Logger(CartItemsService.name);

  constructor(
    @InjectModel(CartItem)
    private cartItemModel: typeof CartItem,
    @InjectModel(Product)
    private productModel: typeof Product,
    @InjectModel(User)
    private userModel: typeof User,
  ) {}

  async findAll(): Promise<CartItem[]> {
    try {
      this.logger.log('–ò—â—É –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–∞—Ö...');
      const items = await this.cartItemModel.findAll();
      return items;
    } catch (error) {
      this.logger.error(' —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–∞—Ö:', error);
      throw error;
    }
  }

  async findOne(id: number): Promise<CartItem> {
    try {
      this.logger.log(`–ò—â—É —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å id: ${id}...`);
      const item = await this.cartItemModel.findByPk(id);
      if (!item) {
        this.logger.warn(`–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢`);
        throw new Error('–¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return item;
    } catch (error) {
     
      throw error;
    }
  }

  async create(cartItemData: Partial<CartItem>): Promise<CartItem> {
    try {
      this.logger.log('–î–æ–±–∞–≤–ª—è—é —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É...');
      const item = await this.cartItemModel.create(cartItemData);
      this.logger.log(`–£—Ä–∞! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É —Å id: ${item.cart_item_id} üéâ`);
      return item;
    } catch (error) {
      this.logger.error(' —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
      throw error;
    }
  }

  async update(id: number, cartItemData: Partial<CartItem>): Promise<[number, CartItem[]]> {
    try {
      this.logger.log(`–û–±–Ω–æ–≤–ª—è—é —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ ${id}...`);
      const result = await this.cartItemModel.update(cartItemData, {
        where: { cart_item_id: id },
        returning: true,
      });
      this.logger.log(`–ì–æ—Ç–æ–≤–æ! –¢–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ ${id} –æ–±–Ω–æ–≤–ª–µ–Ω ‚ú®`);
      return result;
    } catch (error) {
      this.logger.error(`—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ ${id}:`, error);
      throw error;
    }
  }

  async remove(id: number): Promise<number> {
    try {
      this.logger.log(`–£–¥–∞–ª—è—é —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ${id}...`);
      const result = await this.cartItemModel.destroy({
        where: { cart_item_id: id },
      });
      this.logger.log(`–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã üëã`);
      return result;
    } catch (error) {
      this.logger.error(`—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã ${id}:`, error);
      throw error;
    }
  }

  async getUserCart(userId: number): Promise<CartItem[]> {
    try {
      this.logger.log(`–ò—â—É –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      const items = await this.cartItemModel.findAll({
        where: { user_id: userId },
        include: [{
          model: Product,
          as: 'product'
        }]
      });
      this.logger.log(`–í–û—Ç ${items.length} —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! üõçÔ∏è`);
      return items;
    } catch (error) {
      this.logger.error(`–±–ª—è—Ç—å —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }

  async updateQuantity(id: number, quantity: number): Promise<[number, CartItem[]]> {
    try {
      this.logger.log(`–ú–µ–Ω—è—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ ${id} –Ω–∞ ${quantity}...`);
      const result = await this.cartItemModel.update(
        { quantity },
        {
          where: { cart_item_id: id },
          returning: true,
        }
      );
      this.logger.log(`–ì–æ—Ç–æ–≤–æ! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚ú®`);
      return result;
    } catch (error) {
      this.logger.error(`–µ–±–∞ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ ${id}:`, error);
      throw error;
    }
  }

  async clearUserCart(userId: number): Promise<number> {
    try {
      this.logger.log(`–û—á–∏—â–∞—é –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      const result = await this.cartItemModel.destroy({
        where: { user_id: userId }
      });
      this.logger.log(`–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω–∞! üßπ`);
      return result;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }
} 