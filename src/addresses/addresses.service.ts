import { Injectable, Logger } from '@nestjs/common';
import { InjectModel } from '@nestjs/sequelize';
import { Address } from '../models/address.model';
import { User } from '../models/user.model';

@Injectable()
export class AddressesService {
  private readonly logger = new Logger(AddressesService.name);

  constructor(
    @InjectModel(Address)
    private addressModel: typeof Address,
    @InjectModel(User)
    private userModel: typeof User,
  ) {}

  async findAll(): Promise<Address[]> {
    try {
      this.logger.log('–ò—â—É –≤—Å–µ –∞–¥—Ä–µ—Å–∞...');
      const addresses = await this.addressModel.findAll();
      
      return addresses;
    } catch (error) {
      this.logger.error(' —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–æ–≤:', error);
      throw error;
    }
  }

  async findOne(id: number): Promise<Address> {
    try {
      this.logger.log(`–ò—â—É –∞–¥—Ä–µ—Å —Å id: ${id}...`);
      const address = await this.addressModel.findByPk(id);
      if (!address) {
        this.logger.warn(`–ê–¥—Ä–µ—Å —Å id ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢`);
        throw new Error('–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      return address;
    } catch (error) {
      this.logger.error(`–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–∞ ${id}:`, error);
      throw error;
    }
  }

  async create(addressData: Partial<Address>): Promise<Address> {
    try {
      this.logger.log('–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å...');
      const address = await this.addressModel.create(addressData);
      this.logger.log(`–£—Ä–∞! –°–æ–∑–¥–∞–Ω –∞–¥—Ä–µ—Å —Å id: ${(address as any).address_id} üéâ`);
      return address;
    } catch (error) {
      this.logger.error('–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞:', error);
      throw error;
    }
  }

  async update(id: number, addressData: Partial<Address>): Promise<[number, Address[]]> {
    try {
      this.logger.log(`–û–±–Ω–æ–≤–ª—è—é –∞–¥—Ä–µ—Å ${id}...`);
      const result = await this.addressModel.update(addressData, {
        where: { address_id: id },
        returning: true,
      });
      this.logger.log(`–ì–æ—Ç–æ–≤–æ! –ê–¥—Ä–µ—Å ${id} –æ–±–Ω–æ–≤–ª–µ–Ω ‚ú®`);
      return result;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ ${id}:`, error);
      throw error;
    }
  }

  async remove(id: number): Promise<number> {
    try {
      this.logger.log(`–£–¥–∞–ª—è—é –∞–¥—Ä–µ—Å ${id}...`);
      const result = await this.addressModel.destroy({
        where: { address_id: id },
      });
      this.logger.log(`–ê–¥—Ä–µ—Å ${id} —É–¥–∞–ª–µ–Ω üëã`);
      return result;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ ${id}:`, error);
      throw error;
    }
  }

  async getUserAddresses(userId: number): Promise<Address[]> {
    try {
      this.logger.log(`–ò—â—É –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      const addresses = await this.addressModel.findAll({
        where: { user_id: userId }
      });
      
      return addresses;
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
      throw error;
    }
  }

  async setDefaultAddress(userId: number, addressId: number): Promise<void> {
    try {
      this.logger.log(`–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∞–¥—Ä–µ—Å ${addressId} –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}...`);
      
      await this.addressModel.update(
        { is_default: false },
        { where: { user_id: userId } }
      );

      await this.addressModel.update(
        { is_default: true },
        { where: { address_id: addressId, user_id: userId } }
      );

      this.logger.log(`–ì–æ—Ç–æ–≤–æ! –ê–¥—Ä–µ—Å ${addressId} —Ç–µ–ø–µ—Ä—å –æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} ‚≠ê`);
    } catch (error) {
      this.logger.error(` —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞:`, error);
      throw error;
    }
  }
} 